const PC: [u8; 16] = [
    0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf0,
];

const QC: [u8; 16] = [
    0xff, 0xef, 0xdf, 0xcf, 0xbf, 0xaf, 0x9f, 0x8f, 0x7f, 0x6f, 0x5f, 0x4f, 0x3f, 0x2f, 0x1f, 0x0f,
];

const SBOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

fn mul1(b: u8) -> u8 {return b;}

fn mul2(b: u8) -> u8 {return if (b)>>7 == 1 {((b)<<1)^0x1b} else {(b)<<1};}

fn mul3(b: u8) -> u8 {return mul2(b)^mul1(b)}

fn mul4(b: u8) -> u8 {return mul2(mul2(b))}

fn mul5(b: u8) -> u8 {return mul4(b)^mul1(b)}

fn mul6(b: u8) -> u8 {return mul4(b)^mul2(b)}

fn mul7(b: u8) -> u8 {return mul4(b)^mul2(b)^mul1(b)}

fn add_round_constant_p(state: &mut [[u8; 16]; 8], round_number: u8) {
    for i in 0..16 {
        state[0][i] ^= PC[i] ^ round_number;
    }
}

fn add_round_constant_q(state: &mut [[u8; 16]; 8], round_number: u8) {
    for i in 0..8 {
        for j in 0..16 {
            state[i][j] = !state[i][j];
        }
    }

    for i in 0..16 {
        state[7][i] ^= QC[i] ^ round_number;
    }
}

fn sub_bytes(state: &mut [[u8; 16]; 8]) {
    for i in 0..8 {
        for j in 0..16 {
            state[i][j] = SBOX[(state[i][j]) as usize];
        }
    }
}

fn shift_bytes_wide_p(state: &mut [[u8; 16]; 8]) {
    state[0].rotate_left(0);
    state[1].rotate_left(1);
    state[2].rotate_left(2);
    state[3].rotate_left(3);
    state[4].rotate_left(4);
    state[5].rotate_left(5);
    state[6].rotate_left(6);
    state[7].rotate_left(11);
}

fn shift_bytes_wide_q(state: &mut [[u8; 16]; 8]) {
    state[0].rotate_left(1);
    state[1].rotate_left(3);
    state[2].rotate_left(5);
    state[3].rotate_left(11);
    state[4].rotate_left(0);
    state[5].rotate_left(2);
    state[6].rotate_left(4);
    state[7].rotate_left(6);
}

fn mix_bytes(state: &mut [[u8; 16]; 8]) {
    let mut temp: [u8; 8] = [0;8];
    for i in 0..16{
        for j in 0..8{
            temp[j] = 
            mul2(state[(j+0) % 8][i])^
            mul2(state[(j+1) % 8][i])^
            mul3(state[(j+2) % 8][i])^
            mul4(state[(j+3) % 8][i])^
            mul5(state[(j+4) % 8][i])^
            mul3(state[(j+5) % 8][i])^
            mul5(state[(j+6) % 8][i])^
            mul7(state[(j+7) % 8][i]);
        }
        for j in 0..8{
            state[j][i] = temp[j];
        }
    }
}

fn p(state: &mut [[u8; 16]; 8], round_number: u8){
    for i in 0..round_number{
        add_round_constant_p(state, i);
        sub_bytes(state);
        shift_bytes_wide_p(state);
        mix_bytes(state);
    }
}

fn q(state: &mut [[u8; 16]; 8], round_number: u8){
    for i in 0..round_number{
        add_round_constant_q(state, i);
        sub_bytes(state);
        shift_bytes_wide_q(state);
        mix_bytes(state);
    }
}

fn compress(chaining_value: &[u8; 128], message: &[u8; 128]){
    let mut state [[u8; 16]; 8] = [
        [chaining_value[]],

    ]
    // xor m
    // make P

    //copy m 
    //make Q

    // xor P, Q, h
}


fn main() {
    let mut state1: [[u8; 16]; 8] = [
        [
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01,
        ],
        [
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01,
        ],
        [
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01,
        ],
        [
            0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01,
        ],
        [
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01,
        ],
        [
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01,
        ],
        [
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01,
        ],
        [
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01,
        ],
    ];

    let mut state2: [[u8; 16]; 8] = [
        [
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01,
        ],
        [
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01,
        ],
        [
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01,
        ],
        [
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01,
        ],
        [
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01,
        ],
        [
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01,
        ],
        [
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01,
        ],
        [
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01,
        ],
    ];

    println!("state1:");
    for i in 0..8 {
        for j in 0..16 {
            print!("{}\t", state1[i][j]);
        }
        println!("");
    }
    println!("");

    println!("state1 after sub_bytes:");
    sub_bytes(&mut state1);
    for i in 0..8 {
        for j in 0..16 {
            print!("{}\t", state1[i][j]);
        }
        println!("");
    }
    println!("");

    println!("state1 after add_round_constant_p:");
    add_round_constant_p(&mut state1, 2);
    for i in 0..8 {
        for j in 0..16 {
            print!("{}\t", state1[i][j]);
        }
        println!("");
    }
    println!("");

    println!("state1 after shift_bytes_wide_p:");
    shift_bytes_wide_p(&mut state1);
    for i in 0..8 {
        for j in 0..16 {
            print!("{}\t", state1[i][j]);
        }
        println!("");
    }
    println!("");

    println!("state2:");
    for i in 0..8 {
        for j in 0..16 {
            print!("{}\t", state2[i][j]);
        }
        println!("");
    }
    println!("");

    println!("state2 after add_round_constant_q:");
    add_round_constant_q(&mut state2, 2);
    for i in 0..8 {
        for j in 0..16 {
            print!("{}\t", state2[i][j]);
        }
        println!("");
    }
    println!("");

    println!("state2 after shift_bytes_wide_q:");
    shift_bytes_wide_q(&mut state2);
    for i in 0..8 {
        for j in 0..16 {
            print!("{}\t", state2[i][j]);
        }
        println!("");
    }
    println!("");

    println!("state2 after mix_bytes:");
    mix_bytes(&mut state2);
    for i in 0..8 {
        for j in 0..16 {
            print!("{}\t", state2[i][j]);
        }
        println!("");
    }
    println!("");
}
